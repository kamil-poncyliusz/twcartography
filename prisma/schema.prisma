generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CreatedMap {
  id               Int         @id @default(autoincrement())
  collectionId     Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(0)
  description      String      @db.VarChar(200)
  settings         Json        @db.Json @default("{}")
  title            String      @db.VarChar(20)
  turn             Int
  collection       Collection  @relation(fields: [collectionId], references: [id], onDelete:Cascade, onUpdate: Cascade)
}

model User {
  id          Int          @id @default(autoincrement())
  login       String       @unique @db.VarChar(15)
  password    String       @db.Char(60)
  rank        Int          @default(0)
  collections Collection[]
}

model TurnData {
  id        Int            @id @default(autoincrement())
  worldId   Int
  data      Json           @db.Json
  day       Int
  timestamp DateTime       @default(now()) @db.Timestamptz(0)
  world     World          @relation(fields: [worldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Server{
  id              Int          @id @default(autoincrement())
  name            String       @unique
  domain          String?
  updateHour      Int
  worlds          World[]
}

model World {
  id              Int           @id @default(autoincrement())
  serverId        Int
  name            String        @unique
  active          Boolean       @default(true)
  collections     Collection[]
  worldData       TurnData[]
  server          Server        @relation(fields: [serverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Collection {
  id          Int           @id @default(autoincrement())
  authorId    Int
  createdAt   DateTime      @default(now()) @db.Timestamptz(0)
  description String        @db.VarChar(500)
  title       String        @db.VarChar(20)
  views       Int           @default(0)
  worldId     Int
  animations  CreatedAnimation[]
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  maps        CreatedMap[]
  world       World         @relation(fields: [worldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CreatedAnimation {
  id           Int             @id @default(autoincrement())
  collectionId Int
  collection   Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}