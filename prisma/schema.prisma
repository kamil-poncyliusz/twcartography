generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CreatedMap {
  id               Int         @id @default(autoincrement())
  worldId          Int
  turn             Int
  authorId         Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(0)
  title            String      @db.VarChar(20)
  description      String      @db.VarChar(200)
  encodedSettings  String
  collectionId  Int
  position         Int
  author           User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  world            World       @relation(fields: [worldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collection       Collection  @relation(fields: [collectionId], references: [id], onDelete:Cascade, onUpdate: Cascade)
  @@map("maps")
}

model User {
  id          Int          @id @default(autoincrement())
  login       String       @unique @db.VarChar(15)
  password    String       @db.Char(60)
  rank        Int          @default(0)
  maps        CreatedMap[]
  collections Collection[]
}

model TurnData {
  id       Int            @id @default(autoincrement())
  worldId  Int
  turn     Int
  data     Json           @db.Json
  world    World          @relation(fields: [worldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([worldId, turn], name:"worldTurn")
}

model World {
  id              Int           @id @default(autoincrement())
  server          String
  num             String
  startTimestamp  Int
  domain          String
  maps            CreatedMap[]
  worldData       TurnData[]
  collections     Collection[]
  @@index([server,num], name: "fullName")
}

model Collection {
  id          Int           @id @default(autoincrement())
  worldId     Int
  authorId    Int
  createdAt   DateTime      @default(now()) @db.Timestamptz(0)
  title       String        @db.VarChar(20)
  description String        @db.VarChar(500)
  views       Int           @default(0)
  world       World         @relation(fields: [worldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  maps        CreatedMap[]
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}